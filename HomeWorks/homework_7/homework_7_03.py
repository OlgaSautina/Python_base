"""
Реализовать программу работы с органическими клетками, состоящими из ячеек

1) Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
   соответствующий количеству ячеек клетки (целое число).

2) В классе должны быть реализованы методы перегрузки арифметических операторов:
   сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
   Данные методы должны применяться только к Клеткам и выполнять увеличение, уменьшение, умножение и обычное
   (не целочисленное) деление Клеток, соответственно. В методе деления должно осуществляться округление значения
   до целого числа.
   - Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
     двух клеток.
   - Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
     двух клеток больше нуля, иначе выводить соответствующее сообщение.
   - Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
     количества ячеек этих двух клеток.
   - Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
     количества ячеек этих двух клеток.

3) В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
   Данный метод позволяет организовать ячейки по рядам.
   - Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
     переданному аргументу.
   - Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
     Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
     Тогда метод make_order() вернет строку: *****\n*****\n**.
     Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
     Тогда метод make_order() вернет строку: *****\n*****\n*****.
"""


class Cell:
    def __init__(self, part_num):
        self.partitions_num = part_num

    def __add__(self, other):
        return Cell(self.partitions_num + other.partitions_num)

    def __sub__(self, other):
        if self.partitions_num > other.partitions_num:
            return Cell(self.partitions_num - other.partitions_num)
        else:
            return "Разность количества ячеек отрицательна, создать новую Клетку невозможно"

    def __mul__(self, other):
        return Cell(self.partitions_num * other.partitions_num)

    def __truediv__(self, other):
        return Cell(self.partitions_num // other.partitions_num)

    def __str__(self):
        return f'Клетка {self.partitions_num} ячеек'

    def make_order(self, size_row):
        n_rows = self.partitions_num // size_row
        last_row = self.partitions_num % size_row
        result = ''
        i = 0
        # Формируем целые ряды
        while i < n_rows:
            j = 0
            while j < size_row:
                result += "*"
                j += 1
            result += '\n'
            i += 1
        # Формируем последний ряд, если он есть
        if last_row > 0:
            j = 0
            while j < last_row:
                result += "*"
                j += 1
        return result


cell_1 = Cell(55)
cell_2 = Cell(15)
cell_3 = Cell(60)

print(f"Сложение: {cell_1} + {cell_2} = {cell_1 + cell_2}")
print(f"Вычитание: {cell_1} - {cell_2} = {cell_1 - cell_2}")
print(f"Вычитание: {cell_1} - {cell_3} = {cell_1 - cell_3}")
print(f"Умножение: {cell_1} * {cell_3} = {cell_1 * cell_3}")
print(f"Деление: {cell_1} / {cell_2} = {cell_1 / cell_2}\n")

# Вывод ячеек по рядам
print(cell_1)
print(cell_1.make_order(15))

print(cell_2)
print(cell_2.make_order(10))

print(cell_3)
print(cell_3.make_order(6))
